This is the final project of the academic course "18737 Engineering Safe Software Systems" in Carnegie Mellon University 
Sillicon Valley. The purpose is to use klee & afl to test an existing open-source tool wpa_cli, which is downloaded from 
http://w1.fi/cgit/hostap/.


************************************************
Environment Setup for klee
************************************************
Before running the project, you should setup the environemt for klee.
Here are steps I used in 18.04.1-Ubuntu.
For more detail, please refer to the klee website https://klee.github.io/build-llvm60.

Step 1. Install dependencies of klee 
  "sudo apt-get install build-essential curl libcap-dev git cmake libncurses5-dev python-minimal python-pip unzip libtcmalloc-minimal4 libgoogle-perftools-dev libsqlite3-dev doxygen"
  "pip3 install tabulate"
  "sudo apt-get install clang-6.0 llvm-6.0 llvm-6.0-dev llvm-6.0-tools"
  "sudo apt-get install cmake bison flex libboost-all-dev python perl minisat"
  
Step 2. Build STP as the constraint solver for klee
  "git clone https://github.com/stp/stp"
  "cd stp"
  "mkdir build"
  "cd build"
  "cmake .."
  "make -j8"
  "sudo make install"

Step 3. Build uClibc and the POSIX environment model
  "git clone https://github.com/klee/klee-uclibc.git"
  "cd klee-uclibc"  
  "./configure --make-llvm-lib"
  "make -j8"
  
Step 4. Build klee source code
  "git clone https://github.com/klee/klee.git"
  "cd klee"
  "mkdir build"
  "cd build"
  "cmake \
      -DENABLE_SOLVER_STP=ON \
      -DENABLE_POSIX_RUNTIME=ON \
      -DENABLE_KLEE_UCLIBC=ON \
      -DKLEE_UCLIBC_PATH=/home/shaomin/Desktop/klee-uclibc \
      -DENABLE_UNIT_TESTS=OFF \
      -DENABLE_SYSTEM_TESTS=OFF \
      -DLLVM_CONFIG_BINARY=/usr/bin/llvm-config-6.0 \
      -DLLVMCC=/usr/bin/clang-6.0 \
      -DLLVMCXX=/usr/bin/clang++-6.0  \
      /home/shaomin/Desktop/klee"
   "make -j8"
   "cp ./bin/* /usr/bin"
   "cp -r ./../include/klee /usr/include"


************************************************
Run klee.
************************************************
Generally speaking, we don't want to mix normal codes and test codes in the same file. To run klee test, I create a 
wrapper at "wpa_supplicant/klee" used to connect wpa_cli.c and klee instead of changing the original file. 

The klee generates the symbolic arguments for the wpa_cli. The number and the format of arguments are defined in 
"wpa_supplicant/klee/buidl.sh". The wrapper only accepts the readable arguments.


Step 1. Modify variable KLEE_SYMBOLIC_ENVIRONMENT in "wpa_supplicant/klee/buidl.sh" if needed.

Step 2. Run "wpa_supplicant/klee/buidl.sh"

Step 3. Analyze the results
   "klee-stats klee-last"
   "kcachegrind klee-last/run.istats"


************************************************
Environment Setup for klee
************************************************
Step 1. Install afl and afl-cov
  "sudo apt-get install afl afl-cov"
  

************************************************
Run afl.
************************************************
Step 1. Modify corpus file in "wpa_supplicant/afl/iput" if needed.

Step 2. Use afl-gcc to re-build wpa_cli
  "wpa_supplicant/afl/build.sh wpa_cli"

Step 3. Run "wpa_supplicant/afl/buidl.sh"
  "wpa_supplicant/afl/build.sh"
  
  afl may require you to modify system configurations. Use ignore arguments to bypass it.
  "wpa_supplicant/afl/build.sh ignore"
 
  
